1. Basic information
Team number (e.g., 01) : 19
#1 Student ID : 93209704
#1 Student Name : Yuzhou Guo
#2 Student ID : 29249325
#2 Student Name : Michal Guzek
OS (bit) : Ubuntu 16.04 64-bit
gcc version : gcc 5.4.0


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 
Our "Indexes" catalog table has the following schema:
(table-id:int, attribute-name:varchar(50), file-name:varchar(50))
Our index files will have the following names: TableName_AttributeName

Our previous catalog tables remain unchanged:
Tables (table-id:int, table-name:varchar(50), file-name:varchar(50), system-table:int)
Columns(table-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int)

3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
Originally we keep two dynamically allocated buffers inside Class BNLJoin and through getNextTuple() interface
we can fill these buffers with tuples got from left and right iterator.
To do block Nested Loop Join,for each left tuple,we scan the right buffer. If all tuples in left buffer have been checked
for join condition,we read the next page of right iterator in; if all pages of right iterator have been read in, we read
the next numPages pages of left iterator in. This process continues until all tuples of left iterator have been processed.

4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your index nested loop works.
For each tuple from the outer relation we extract the condition field into variable of type vector<byte>. Then,
we call setIterator (on the IndexScan *rightIn constructor argument) in order to use proper key for searching within index:
        rightIn->setIterator(extractedConditionField.data(), extractedConditionField.data(), true, true);
Subsequently, when we have a matching data entry in the index, we concatenate those two tuples and insert into our
temporary table that INLJoin creates.
In getNextTuple method we simply use RM_ScanIterator, which we created before, to iterate over our temporary table
of concatenated records.

5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).


6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.
Our basic version of aggregation simply iterates over all the elements from a given input iterator and, depending
on the type of the field used for aggregation, it updates one of the following variables in each loop iteration:
	    int resInt = 0;         //for int type
		float resReal = 0.0;    //for float type
		int cnt = 0;            //for COUNT/AVG aggregations
It then assigns the ultimate value to:
        float result;
And passes the that variable's value to the:
        void *data
argument of getNextTuple method.

7. Implementation Detail
- Have you added your own source file (.cc or .h)?
No
- Have you implemented any optional features? Then, describe them here.
No
- Other implementation details:


6. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)

